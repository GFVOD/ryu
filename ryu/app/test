from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER, CONFIG_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3

class Hub(app_manager.RyuApp)
    """

    """
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSIOPN]
    def __init(self,*args,**kwargs):
        super(Hub,self).__init__(*args,**kwargs)

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures,CONFIG_DISPATCHER)
    def switch_features_handler(self,ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        ofp_parser = datapath.ofproto_parser

        #install thee table-miss flow entry
        match = ofp_parser.OFPMatch()
        actions = [ofp_parser.OFPActionOutPut(ofproto.OFPP_CONTROLLER,
                                              ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath,0,match,actions)

    def add_flow(self,datapath,priority,match,actions):
        ofproto = datapath.ofproto
        ofp_parser = datapath.ofproto_parser

        ins = [ofp_parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS.
                                                actions)]
        mod = ofp_parser.OFPFlowMod(datapath=datapath,priority=priority,
                                    instructions=ins,amtch=match)
        datapath.send_msg(mod)


    @set_ev_cls(ofp_event.EventOFPPacketIn,MAIN_DISPATCHER)
    def paket_in_handler(self,ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofprotoofp_parser
        in_port = msg.match['in_port']

        match = ofp_parser.OFPMatch[]